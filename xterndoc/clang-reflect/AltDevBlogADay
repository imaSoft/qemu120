
Search terms: c++ reflection clang
http://www.altdevblogaday.com/2011/09/25/reflection-in-c-part-1-introduction/
2012-11-9


Reflection in C++, Part 1: Introduction

Adding reflection to C++ via a library or other means can be a simple task, a very hard task, or a down-right impossible task. You can’t reflect all aspects of your C++ program and it’s highly unlikely that you will ever want to do so.

    I’ll cover a very simple method of reflection that can be very powerful, developed in my spare time as Reflectabit, with a similar implementation written for Splinter Cell: Conviction. The main selling points of the implementation are the ease with which you can replicate anything over a network connection and the extra bonus of being able to live-edit your C++ code while the game is running.
    This will be followed by an approach that required the development of an IDL compiler and some crazy template programming for performing binding to arbitrary programming languages. Even though it worked on a PSP, it wasn’t the ideal method of achieving a solution for that platform and a subset of its implementation could prove a good match for others out there.
    Another spare time project of mine I’ll cover is something I informally call Reflectalot. It works by scanning a PDB file and is surprisingly thorough at providing you with most of the information you need, albeit not really cross-platform (PC & Xbox 360 only). One of its cunning little features is its ability to provide you with a constant-time typeof operator.
    Finally I’ll cover my latest development, clReflect, that uses the clang C++ frontend to build a reflection database. This to me is as close to ideal as I’m going to get for C++ on Windows, however it can be taken to its logical conclusion on other platforms such as MacOS or Linux where the LLVM backend is more stable. Please checkout its webpage because I’d really love some help developing it further!

What is Reflection?

A reflection API is a very basic, powerful tool that every game studio should have at their disposal. It normally contains some or all of the following features:

    A database of types and their inheritance relationship with each other.
    A means of creating objects of a specific type by name.
    A list of data member descriptions for each type, with name/type/offset tuples.
    A database of enumeration types and their associated key/value pairs.
    A database of functions/methods with their return types and parameter lists.
    A means of calling functions/methods by name at runtime with an arbtrarily constructed parameter list.
    A database of properties represented as Get/Set method pairs that externally look like a named value.
    A database of attributes that can be attached to any of the above, describing how they should be used.

Each language has varying levels of support for reflection, while C++ has RTTI. You can do various things with RTTI but it’s an incredibly limited system that only gives you:

    The ability to discover an object’s type at runtime through the typeid operator.
    A typeid operator that can also be applied to types themselves.
    A type’s name, its hash code and some comparison functions.
    Runtime downcasting and similar operations through dynamic_cast.

This is not nearly enough! RTTI also has varying levels of support between compilers and type names are implementation specific.

So why would you want reflection? Perhaps it’s best to list a few things that it can enable:

    Serialisation of any game type.
    Transparent implementations of various backend data formats with one point of serialisation for any given format.
    Versionable serialisation of any data.
    Inspect game state of any object at runtime for debugging.
    Dependency tracking with the pointer graph (ever wanted to know what objects are dependent on another before deleting?).
    Reloadable resource (mesh, texture, script, etc) reference updating.
    Automatically populate and describe user interfaces for editing tools.
    Binding to arbitrary programming languages (Lua, C#, Python, etc.) through minimal translation layers.
    Network communication/replication through serialisation and RPC.
    Memory mapping of data formats with post-load pointer patching.
    Live C++ code editing.
    Garbage collection or defragmentable memory heaps (useful on systems where the GPU uses physical addressing).

You can of course build individual systems for each of these but they all share the same need to register type data and access it offline or at runtime. Using reflection for these systems can either make everything easier to understand and maintain or obfuscate intent and lead to a brittle code base. As such, a clean and simple reflection API is absolutely vital if you intend to adopt one.

Generating a reflection database can be done in any number of different ways with C++, including:

    Using macros to simultaneously annotate your code and generate registration calls.
    Using templates and meta-programming techniques to achieve the same goal.
    Using a hybrid of the above or even doing it non-intrusively. Collectively these are runtime databases with no offline representation.
    Using an IDL/DDL compiler to generate cpp/h files containing C++ equivalents and registration code. This can also generate an offline representation of your database that can be used in tools.
    Using an existing language that already has reflection to describe your data/interfaces to achieve the same as the previous method (C# is a good candidate for this).
    Performing a pre/post process on your C++ code using a custom parser that picks up interesting information.
    Inspecting debug information emitted by the compiler.

There are many tradeoffs with each technique and covering each is beyond the scope of these posts. However, the use-cases should be broad enough to show how varied implementations can be.

