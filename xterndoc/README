.
├── [       4096]  embedded-linux
│   ├── [     921485]  embedded_linux_realtime%20v2%202p.pdf
│   ├── [         92]  embedded_linux_realtimev2-link
│   └── [    1117018]  free-electrons-seminaire-temps-reel-5-mai-2010-toulouse.pdf
├── [       4096]  free-electrons
│   ├── [     346186]  embedded-agenda.pdf
│   ├── [    5260176]  embedded-linux-presentation.pdf
│   ├── [   13714121]  embedded-slides.pdf
│   ├── [   12825921]  ldd3.pdf
│   ├── [     203757]  linux-agenda.pdf
│   └── [    5701473]  linux-slides.pdf
└── [          0]  README

2 directories, 10 files


git tips: 
===========

push current branch, set to global ~/.gitconfig:
push.default=current


push head to a remote branch:
git push origin HEAD:refs/heads/<branchname>


Use .netrc instead of ssh key:
machine code.google.com login <login-name> password <password>
machine github.com login <login-name> password <password>


github pull request workflow
==============================
https://www.openshift.com/wiki/github-workflow-for-submitting-pull-requests

[1] Forking a repository.

[2] Cloning your fork

   git clone git@github.com:<username>/<repo-name>.git
   git clone git@github.com:kraman/crankcase.git

[3] Add the upstream repo so that you can pull changes

   git remote add upstream <original repo git url>
   git remote add upstream git@github.com:openshift/crankcase.git

[4] Working on a topic branch

 Always try to avoid working on the master branch. It usually results in 
 merge conflicts and/or update issues. Instead, work on a bug/feature/topic 
 branch whenever possible.

   #start from the master branch
   git checkout master

   #create a new branch
   git branch dev/kraman/bug/12345

   #switch to the new branch
   git checkout dev/kraman/bug/12345

   #...make changes...

[5] Staying updated

 Once a fork has been created, it does not automatically track the upstream 
 repository. Follow the steps outlined below to keep the master branch up-to-date.

   #pull the latest changes from upstream
   git fetch upstream
   git fetch upstream --tags

   #make sure there are no un-committed changes
   git stash

   #make sure we are working on the master branch
   git checkout master

   #merge the latest changes
   git merge upstream/master

   #push the updates changes to our GitHub fork
   git push origin master
   git push origin --tags

[6] Working 

   #return to your bug/feature branch
   git checkout dev/kraman/bug/12345

   #rebase this branch onto latest code from master (expect conflicts)
   git rebase master

   #... resolve conflicts

   #push the rebased branch back to your fork
   git push origin dev/kraman/bug/12345 -f

   #Restore any un-committed changes
   git stash pop

 NOTE: The git stash steps are optional. It is easier if you commit 
 all changes before attempting a rebase.

[7] Submitting a patch

 Once your code is ready to be submitted, you will need to submit 
 a pull request with your changes.

    Update your branch and make sure you are rebased off the latest upstream/master
    Squash your commits onto a single revision
    Submit a pull request on GitHub 

 Squashing your changes into one revision

 Before you can submit a request, rebase all your changes on to 
 a single commit. This makes it easier to review and also makes 
 reverting the code easier in case of any build breakages.

   git rebase -i master
   #... squash commits ...

 For more information about squashing commits, read [1] 

[8] Follow instructions on github to create a pull request.



